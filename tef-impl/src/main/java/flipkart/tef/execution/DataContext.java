/*
 * Copyright [2024] [The Original Author]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package flipkart.tef.execution;

import flipkart.tef.bizlogics.DataAdapterKey;
import flipkart.tef.bizlogics.DataAdapterResult;
import flipkart.tef.interfaces.MutationListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * DataContext is used to store the data being generated by adapters during a flow execution.
 * The stored data is then used to support the injections wherever required.
 *
 * 
 * Date: 19/06/20
 * Time: 5:23 PM
 */
public class DataContext {
    private final Map<DataAdapterKey, Object> context;
    private final List<MutationListener> mutationListeners;

    public DataContext() {
        context = new HashMap<>();
        mutationListeners = new ArrayList<>();
    }

    public void put(DataAdapterResult value) {
        if (value != null && value.getResult() != null) {
            if (context.containsKey(value.getKey())) {
                mutationListeners.forEach(l -> l.mutated(value));
            }
            context.put(value.getKey(), value.getResult());
        }
    }

    // TODO streamline this interface

    /**
     * Get the data from the datacontext with an empty name
     *
     * @param clazz
     * @param <T>
     * @return
     */
    public <T> T getAnonymous(Class<T> clazz) {
        return get(clazz, "");
    }

    private <T> T get(Class<T> clazz, String name) {
        DataAdapterKey<T> key = new DataAdapterKey<>(name, clazz);
        return get(key);
    }

    public <T> T get(DataAdapterKey<T> key) {
        Object value = context.get(key);
        if (value != null) {
            return key.getResultClass().cast(context.get(key));
        } else {
            return null;
        }
    }

    public boolean addMutationListener(MutationListener listener) {
        return this.mutationListeners.add(listener);
    }

    public boolean removeMutationListener(MutationListener listener) {
        return this.mutationListeners.remove(listener);
    }
}
